<pre class=metadata>
Title: Local Font Access API
Shortname: LocalFonts
Level: 1
Status: CG-DRAFT
Group: WICG
ED: https://wicg.github.io/local-font-access/
Repository: WICG/font-enumeration
Abstract: This specification documents web browser support for allowing users to grant web sites access to the full set of available system fonts for enumeration, and access to the raw table data of fonts, allowing for more detailed custom text rendering.
Editor: Emil A. Eklund, Google Inc. https://google.com, eae@google.com
Editor: Alex Russell, Google Inc. https://google.com, slightlyoff@google.com
Editor: Joshua Bell, Google Inc. https://google.com, jsbell@google.com
Editor: Olivier Yiptong, Google Inc. https://google.com, oyiptong@google.com
Assume Explicit For: yes
Markup Shorthands: markdown yes, css yes
Complain About: accidental-2119 yes, missing-example-ids yes
Favicon: logo-font-enumeration.png
</pre>
<!--
Test Suite: https://github.com/web-platform-tests/wpt/tree/master/font-enumeration
-->

<pre class=anchors>
spec: webidl; urlPrefix: https://heycam.github.io/webidl/
    type: dfn
        text: asynchronous iterator initialization steps; url: #TBD
        text: get the next iteration result; url: #TBD
spec: ECMA-262; urlPrefix: https://tc39.github.io/ecma262/
    type: interface; for: ECMAScript
        text: Map; url: sec-map-objects
    type: dfn
        text: ecma-record; url: #sec-list-and-record-specification-type
</pre>

<style>
/* Default ED/WD stylesheets set "both"; not needed for logo floated right */
div.head h1 { clear: left; }

.domintro::before {
    content: 'For web developers (non-normative)';
    text-transform: initial;
}
.domintro dt {
    font-family: Menlo, Consolas, "DejaVu Sans Mono", Monaco, monospace;

    padding-top: 0.5em;
    padding-bottom: 1em;
}
.domintro dt a {
    color: inherit; border-bottom-style: none;
}
.domintro dt code {
    font-size: inherit;
}
</style>


<img src="logo-font-enumeration.svg" alt="logo"
    style="height: 100px; width: 100px; position: absolute; right: 20px; top: 30px;">

<!-- ============================================================ -->
# Introduction # {#introduction}
<!-- ============================================================ -->

This specification describes a font enumeration API for web browsers which may, optionally, allow users to grant access to the full set of available system fonts. For each font, low-level (byte-oriented) access to the various OpenType tables is provided.

Web developers historically lack anything more than heuristic information about which local fonts are available for use in styling page content. Web developers often include complex lists of `font-family` values in their CSS to control font fallback in a heuristic way. Generating good fallbacks is such a complex task for designers that tools have been built to help "eyeball" likely-available local matches.

Font enumeration helps by enabling:

* Logging of likely-available fonts to improve server-side font rule generation.
* Scripts to generate style rules based on "similar" local fonts, perhaps saving a download.
* Improving styling options for user-generated content, allowing the generation of style rules via more expressive font selection menus.

While the web has its origins as a text-focused medium and user agents provide very high quality typography support, they have limitations that impact some classes of web-based applications:

* System font engines (and browser stacks) may handle the parsing and display of certain glyphs differently. These differences are necessary, in general, to create fidelity with the underlying OS (so web content doesn't "look wrong"). These differences reduce fidelity.
* Web application developers may have legacy font stacks for their applications which they are bringing to the web. To use these engines, they usually require direct access to font data; something Web Fonts do not provide.

This API provide high-end tools access to the same underlying data tables that browser layout and rasterization engines use for drawing text. Examples include the OpenType [[!OPENTYPE]] `glyf` table for glyph vector data, the `GPOS` table for glyph placement, and the `GSUB` table for ligatures and other glyph substitution. This information is necessary for these tools in order to guarantee both platform-independence of the resulting output (by embedding vector descriptions rather than codepoints) and to enable font-based art (treating fonts as the basis for manipulated shapes).


<!-- ============================================================ -->
# Goals # {#goals}
<!-- ============================================================ -->

The API should:

* Provide efficient enumeration of all local fonts without blocking the main thread
* Be available from Workers
* Allow multiple levels of privacy preservation; e.g., full access for "trusted" sites and degraded access for untrusted scenarios
* Reflect local font access state in the Permissions API
* Restrict access to local font data to Secure Contexts
* Provide unique identification of families and instances (variants like "bold" and "italic"), including PostScript names
* Provide access to all browser-allowed font tables (may vary per browser)
* Enable a memory efficient implementation, avoiding leaks and copies by design

<!--
The ability to uniquely identify a specific font in the case of conflicting names (e.g., Web Font aliases vs. local PostScript font names)
-->

<!-- ============================================================ -->
# Examples # {#examples}
<!-- ============================================================ -->

*This section is non-normative.*

<!-- ============================================================ -->
## Enumerating local fonts ## {#example-enumerate-local-fonts}
<!-- ============================================================ -->

The API allows script to enumerate local fonts, including properties about each font.

<aside class=example id=example-async-query>
The following code queries the available local fonts, and logs details about each to the console.

```js
// Asynchronous Query and Iteration
(async () => { // Async block
  // May prompt the user:
  const status = await navigator.permissions.request({ name: "local-fonts" });
  if (status.state !== "granted")
    throw new Error("Cannot enumerate local fonts");

  // In the future, query() could take filters e.g. family name, and/or options
  // e.g. locale.
  const fonts_iterator = navigator.fonts.query();

  for await (const metadata of fonts_iterator) {
    console.log(metadata.postscriptName);
    console.log(metadata.fullName);
    console.log(metadata.family);
  }
})();
```
</aside>

<!-- ============================================================ -->
## Styling with local fonts ## {#example-style-with-local-fonts}
<!-- ============================================================ -->

Advanced creative tools may wish to use CSS to style text using all available local fonts. In this case, getting access to the local font name allows the user to select from a richer set of choices:

<aside class=example id=example-query-build-ui>

The following code populates a drop-down selection form element with the available local fonts, and could be used as part of the user interface for an editing application.

```js
const font_select = document.createElement("select");
font_select.onchange = e => {
  console.log("selected:", font_select.value);
  // Use the selected font to style something here.
};

document.body.appendChild(font_select);

(async () => { // Async block
  // May prompt the user:
  const status = await navigator.permissions.request({ name: "local-fonts" });
  if (status.state !== "granted")
    throw new Error("Cannot continue to style with local fonts");

  for await (const metadata of navigator.fonts.query()) {
    const option = document.createElement("option");
    option.text = metadata.fullName;
    option.value = metadata.fullName;
    option.setAttribute("postscriptName", metadata.postscriptName);
    font_select.append(option);
  }
})();
```
</aside>


<!-- ============================================================ -->
## Accessing table data ## {#example-accessing-table-data}
<!-- ============================================================ -->

The API allows script to request the internal tables of fonts.

<aside class=example id=example-font-tables>
The following code queries the available local fonts, and logs details about each to the console.

Here we use enumeration to access specific OpenType tables of local fonts; we can use this to parse out specific data or feed it into, e.g., WASM version of [HarfBuzz](https://www.freedesktop.org/wiki/Software/HarfBuzz/) or [Freetype](https://www.freetype.org/):

```js
(async () => { // Async block
  // May prompt the user
  const status = await navigator.permissions.request({ name: "local-fonts" });
  if (status.state !== "granted")
    throw new Error("Cannot continue to style with local fonts");

  for await (const metadata of navigator.fonts.query()) {
    // Looking for a specific font:
    if (metadata.postscriptName !== "Consolas")
      continue;

    // 'getTables()' returns Blobs of table data. The default is
    // to return all available tables. See:
    //    https://docs.microsoft.com/en-us/typography/opentype/spec/
    // Here we ask for a subset of the tables:
    const tables = await metadata.getTables([ "glyf", "cmap", "head" ]);

    // 'tables' is a Map of table names to Blobs
    const blob = tables.get("head");

    // Slice out only the bytes we need.
    const bytes = new DataView(await blob.slice(0, 4).arrayBuffer());

    // Parse out the version number of our font:
    //    https://docs.microsoft.com/en-us/typography/opentype/spec/head
    const major = bytes.getInt16(0);
    const minor = bytes.getInt16(2);
    console.log("Consolas version:", (major + (minor/10)));
  }
})();
```
</aside>

<!-- ============================================================ -->
# Concepts # {#concepts}
<!-- ============================================================ -->

Issue: Define any new concepts beyond just the API

<!-- ============================================================ -->
## Font Representation ## {#concept-font-representation}
<!-- ============================================================ -->

A <dfn>font representation</dfn> is an OpenType [[!OPENTYPE]] definition of a font. Even if the font was originally described in another file format, it is assumed that if it is supported by a user agent then an OpenType representation can be derived for it. This includes True Type [[TrueType]], Web Open Font Format 1.0 [[WOFF]] and Web Open Font Format 2.0 [[WOFF2]] files.

<div dfn-for="font representation">

A [=/font representation=] has a <dfn>table list</dfn>, a [=/list=] of [=/font tables=].

</div>

<!-- ============================================================ -->
## Font Table ## {#concept-font-table}
<!-- ============================================================ -->

A <dfn>font table</dfn> is an OpenType [[!OPENTYPE]] table.

<div dfn-for="font table">

A [=/font table=] has a <dfn>tag</dfn>, which is a {{ByteString}} of length 4, derived from the `Tag` of the table record.

A [=/font table=] has <dfn>data bytes</dfn>, which is a [=/byte sequence=] corresponding to the table data.

</div>

Table types within the original font file that are not supported by the user agent should be elided from the [=/font representation=]'s [=font representation/table list=] as defined by this specification. Tables with subtables not supported by the user agent should be transcoded to elide those subtables.

Note: For example, if a user agent does not support the `EBDT` table, it will not appear in a [=/font representation=]'s [=font representation/table list=]. If a user agent does not support the platform 1, encoding 0, format 6 subtable of the `cmap` table, the [=/font table=] with the `cmap` [=font table/tag=] will not include it.


<!-- ============================================================ -->
## Name Table ## {#concept-name-table}
<!-- ============================================================ -->

A [=/font representation=] has a <dfn for="font representation">name table</dfn>, which is the [=/font table=] in its [=font representation/table list=] with [=font table/tag=] \``name`\`.

The [=font representation/name table=] has a [=/map=] <dfn for="name table">names</dfn>, which is a mapping from an {{unsigned short}} to a [=/localized string table=].

A <dfn>localized string table</dfn> is a [=/map=] from a BCP 47 language tag to a {{USVString}}. [[BCP47]]

<div algorithm >

A [=/font representation=]'s <dfn for="font representation" lt="name string">name string |id| for |tag|</dfn> is given by these steps:

1. Let |names| be the [=/font representation=]'s [=font representation/name table=]'s [=name table/names=].
1. Let |table| be |names|[|id|].
1. Return |table|[|tag|].

Issue: What if there is no matching |id| or |tag|? Empty string? Where does fallback occur?

</div>

The <dfn>current language</dfn> is the BCP 47 language tag returned by the {{NavigatorLanguage}} mixin's {{NavigatorLanguage/language}} propertyy. [[BCP47]]

<!-- ============================================================ -->
# Local font access permission # {#permission}
<!-- ============================================================ -->

Enumeration of local fonts requires a permission to be granted.

The <dfn for=PermissionName enum-value>"`local-fonts`"</dfn> [=/powerful feature=]’s permission-related flags, algorithms, and types are defaulted.


<aside class=example id=example-request-permission>
Permission to enumerate local fonts can be requested using the `navigator.permissions` API:

```js
const status = await navigator.permissions.request({ name: "local-fonts" });
if (status.state === "granted")
  console.log("permission was granted 👍");
else
  console.log("permission was denied 👎")
```
</aside>

<!-- ============================================================ -->
# API # {#api}
<!-- ============================================================ -->

<!-- ============================================================ -->
## Font manager ## {#font-manager-api}
<!-- ============================================================ -->

<div class="domintro note">

: for await (const |metadata| of navigator . fonts . {{FontManager/query()}}) { ... }
  :: Asynchronously iterate over the available fonts. Each time through the loop, |metadata| will be a new {{FontMetadata}} object.

</div>


<xmp class=idl>
[SecureContext]
interface mixin NavigatorFonts {
  [SameObject] readonly attribute FontManager fonts;
};
Navigator includes NavigatorFonts;
WorkerNavigator includes NavigatorFonts;
</xmp>

<div algorithm>
Each [=/environment settings object=] has an associated {{FontManager}} object.

The <dfn attribute for=NavigatorFonts>fonts</dfn> getter steps are to return [=/this=]'s [=/relevant settings object=]'s {{FontManager}} object.
</div>

<xmp class=idl>
[SecureContext,
 Exposed=(Window,Worker)]
interface FontManager {
  FontIterator query();
};
</xmp>

<div algorithm>
The <dfn method for=FontManager>query()</dfn> method steps are:

Issue: This is returning an async iterable; should it be defined using Promise jargon here?

Issue: Do we want query() to implicitly request the permission?

1. Let |promise| be [=/a new promise=].
1. If [=/this=]’s [=relevant settings object=]'s [=origin=] is an [=/opaque origin=], then [=/reject=] |promise| with a {{TypeError}}.
1. Otherwise, run these steps [=in parallel=]:
    1. Let |permission| be the result of [=requesting permission to use=] {{PermissionName/"local-fonts"}}.
    1. If |permission| is not {{PermissionState/"granted"}}, then [=/reject=] |promise| with a "{{NotAllowedError}}" {{DOMException}}, and abort these steps.
    1. [=/Resolve=] |promise| with a newly created {{FontIterator}}.
1. Return |promise|.

</div>

<xmp class=idl>
[SecureContext,
 Exposed=(Window,Worker)]
interface FontIterator {
  async iterable<FontMetadata>;
};
</xmp>

All {{FontIterator}} objects contain an internal <dfn attribute for=FontIterator>\[[FontList]]</dfn> slot.

<div algorithm>
The <dfn iterator for=FontIterator>asynchronous iterator initialization steps</dfn> for {{FontIterator}} are as follows:

1. Set [=/this=]'s {{FontIterator/[[FontList]]}} to a new empty [=/queue=].
1. For each local font |font| on the system, run these steps:
    1. Let |representation| be a [=/font representation=] for |font|.
    1. [=queue/Enqueue=] |representation| to [=/this=]'s {{FontIterator/[[FontList]]}}.

</div>

Issue: Make it clear that the user agent can filter fonts and/or prompt the user to select a subset of system fonts.

Note: User agents are expected to actually populate the iterator's queue asynchronously and possibly lazily, although this is not observable.

<div algorithm>
To <dfn iterator for=FontIterator>get the next iteration result</dfn> for {{FontIterator}}, run the following steps:

1. Let |promise| be [=/a new promise=].
1. If [=/this=]'s {{FontIterator/[[FontList]]}} is [=queue/empty=], then:
    1. [=/Resolve=] |promise| with undefined.
1. Otherwise:
    1. Let |representation| be the result of [=queue/dequeuing=] from [=/this=]'s {{FontIterator/[[FontList]]}}.
    1. Let |metadata| be a new {{FontMetadata}} instance associated with |representation|.
    1. [=/Resolve=] |promise| with |metadata|.
1. Return |promise|.

</div>


<!-- ============================================================ -->
## The {{FontMetadata}} interface ## {#fontmetadata-interface}
<!-- ============================================================ -->

A {{FontMetadata}} provides details about a font face. Each {{FontMetadata}} has an associated [=/font representation=].

<div class="domintro note">

    : |metadata| . {{FontMetadata/postscriptName}}
    :: The PostScript name for the font. Example: "`Arial-Bold`"

    : |metadata| . {{FontMetadata/fullName}}
    :: The full font name, including family subfamily names. Example: "`Arial Bold`"

    : |metadata| . {{FontMetadata/family}}
    :: The font family name. Example: "`Arial`"

</div>


<xmp class=idl>
[Exposed=(Window,Worker)]
interface FontMetadata {
  Promise<FontTableMap> getTables(optional sequence<ByteString> tables);

  readonly attribute USVString postscriptName;
  readonly attribute USVString fullName;
  readonly attribute USVString family;
};
</xmp>

<div dfn-for="FontMetadata">

The <dfn attribute>postscriptName</dfn> getter steps are to return [=/this=]'s associated [=/font representation=]'s [=font representation/name string=] 6 for \``en`\`.

The <dfn attribute>fullName</dfn> getter steps are to return [=/this=]'s associated [=/font representation=]'s [=font representation/name string=] 4 for the [=/current language=].

The <dfn attribute>family</dfn> getter steps are to return [=/this=]'s associated [=/font representation=]'s [=font representation/name string=] 1 for the [=/current language=].

</div>

<aside class=issue>
Verify source for all of the above. See [Microsoft Typography](https://docs.microsoft.com/en-us/typography/opentype/spec/name)

* Encoding - assume everything has been successfully transcoded to UTF-16 (USVStrings) ?
* Localization - we will provide "en-us"-equivalent labels here - define that behavior.

</aside>

Issue: Include `name` ID 2 (Font subfamily, e.g. "Regular") as well?

Issue: Include `name` ID 3 (Unique identifier) as well?


<div class="domintro note">

    : await |map| = |metadata| . {{FontMetadata/getTables()}}
    : await |map| = |metadata| . {{FontMetadata/getTables()|getTables}}(|tableNames|)
    :: Request the internal tables of |metadata|. The result |map| is {{FontTableMap}} with an API like a {{ECMAScript/Map}}, where the keys are matching table names and the values are {{Blob}}s with the table binary data. If |tableNames| is not specified, all tables are returned.

</div>

<xmp class=idl>
[Exposed=(Window,Worker)]
interface FontTableMap {
  readonly maplike<ByteString, Blob>;
};
</xmp>


<div algorithm>

The <dfn method for=FontMetadata>getTables(|tableNames|)</dfn> method steps are:

1. Let |promise| be [=/a new promise=].
1. Otherwise, if |tableNames| was given but is [=list/empty=], then [=/reject=] |promise| with a {{TypeError}}.
1. Otherwise, run these steps [=in parallel=]:
    1. Let |permission| be the result of [=requesting permission to use=] {{PermissionName/"local-fonts"}}.
    1. If |permission| is not {{PermissionState/"granted"}}, then [=/reject=] |promise| with a "{{NotAllowedError}}" {{DOMException}}, and abort these steps.
    1. Let |map| be a new {{FontTableMap}}.
    1. Let |backing| be |map|'s \[[BackingMap]] (an {{ECMAScript/Map}}.)
    1. Let |font| be [=/this=]'s [=/font representation=].
    1. [=list/For each=] |table| of |font|'s [=font representation/table list=]:
        1. Let |tag| be |table|'s [=font table/tag=].
         1. If |tableNames| was given and does not [=list/contain=] |tag|, then [=iteration/continue=].
        1. Let |blob| be a new {{Blob}} whose contents are |table|'s [=font table/data bytes=] and {{Blob/type}} attribute is \``application/octet-stream`\`.
        1. Append the [=ecma-record|Record=] { \[[Key]]: |tag|, \[[Value]]: |blob| } to |backing|.\[[MapData]].
    1. [=/Resolve=] |promise| with |map|.
1. Return |promise|.

Issue: Table order? If returned in requested order, what if the |tableNames| argument is omitted? (Observable by iterating the map.)

Issue: What is the expected behavior if requested tables do not exist? If developers call `getTables()` with one name, they might expect a rejection if the table does not exist. On the other hand, if they call `getTables()` with a set of names they might expect all matching tables to be provided with no rejection. The above algorithm provides the latter behavior.

</div>

<!-- ============================================================ -->
# Internationalization considerations # {#i18n}
<!-- ============================================================ -->

Issue: Document internationalization consideration, e.g. string localization

<!-- ============================================================ -->
## Font Names ## {#i18n-names}
<!-- ============================================================ -->

The \``name`\` table in OpenType [[!OPENTYPE]] fonts allows names (family, subfamily, etc) to have multilingual strings, using either platform-specific numeric language identifiers or language-tag strings conforming to [[BCP47]]. For example, a font could have family name strings defined for both \``en`\` and \``zh-Hant-HK`\`.

The {{FontMetadata}} properties {{FontMetadata/postscriptName}}, {{FontMetadata/fullName}}, and {{FontMetadata/family}} are provided by this API simply as strings, using the \``en`\` locale. This matches the behavior of the {{FontFace}} {{FontFace/family}} property.

Issue: The above does not match the spec/implementation. Resolve the ambiguity.

Web applications that need to provide names in other languages can request and parse the \``name`\` table directly.

Issue: Should we define an option to the {{FontManager/query()}} method to specify the desired language for strings (e.g. `{lang: 'zh'}`), falling back to \``en`\` if not present?


<!-- ============================================================ -->
# Accessibility considerations # {#a11y}
<!-- ============================================================ -->

There are no known accessibility impacts of this feature.

<!-- ============================================================ -->
# Security considerations # {#security}
<!-- ============================================================ -->

There are no known security impacts of this feature.

<!-- ============================================================ -->
# Privacy considerations # {#privacy}
<!-- ============================================================ -->

<!-- ============================================================ -->
## Fingerprinting ## {#privacy-fingerprinting}
<!-- ============================================================ -->

The font list includes:

* Fonts included in the operating system distribution.
* Fonts installed by particular applications installed on the system, for example office suites.
* Fonts directly installed by the system administrator and/or end user.

This provides several "bits of entropy" to distinguish users.

User agents could mitigate this in certain cases (e.g. when the permission is denied, or in Private Browsing / "incognito" mode) by providing an enumeration of a fixed set of fonts provided with the user agent.

User agents may also allow the user to select a set of fonts to make available via the API.

<!-- ============================================================ -->
## Identification ## {#privacy-identification}
<!-- ============================================================ -->

Users from a particular organization could have specific fonts installed. Employees of "Example Co." could all have an "Example Corporate Typeface" installed by their system administrator, which would allow distinguishing users of a site as employees.

There are services which create fonts based on handwriting samples. If these fonts are given names including personally identifiable information (e.g. "Alice's Handwriting Font"), then personally identifiable information would be made available. This may not be apparent to users if the information is included as properties within the font, not just the font name.


<!-- ============================================================ -->
# Acknowledgements # {#acknowledgements}
<!-- ============================================================ -->

We'd like to acknowledge the contributions of:

* Daniel Nishi, Owen Campbell-Moore, and Mike Tsao who helped pioneer the previous local font access proposal.
* Evan Wallace, Biru, Leah Cassidy, Katie Gregorio, Morgan Kennedy, and Noah Levin of Figma who have patiently enumerated the needs of their ambitious web product.

Special thanks (again!) to Tab Atkins, Jr. for creating and maintaining [Bikeshed](https://github.com/tabatkins/bikeshed), the specification authoring tool used to create this document.

And thanks to
Chase Phillips,
Dominik Röttsches, and
Igor Kopylov
for suggestions, reviews, and other feedback.
