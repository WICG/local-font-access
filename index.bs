<pre class=metadata>
Title: Local Font Access API
Shortname: LocalFonts
Level: 1
Status: CG-DRAFT
Group: WICG
ED: https://wicg.github.io/local-font-access/
Repository: WICG/local-font-access
Abstract: This specification documents web browser support for allowing users to grant web sites access to the full set of available system fonts for enumeration, and access to the raw data of fonts, allowing for more detailed custom text rendering.
Editor: Joshua Bell, Google Inc. https://google.com, jsbell@google.com
Former Editor: Emil A. Eklund
Assume Explicit For: yes
Markup Shorthands: markdown yes, css yes
Complain About: accidental-2119 yes, missing-example-ids yes
Favicon: logo-font-enumeration.svg
Test Suite: https://github.com/web-platform-tests/wpt/tree/master/font-access
</pre>

<pre class=anchors>
spec: html; urlPrefix: https://html.spec.whatwg.org/multipage/
    urlPrefix: system-state.html
        type: dfn
            text: a plausible language; url: a-plausible-language
</pre>

<style>
/* Default ED/WD stylesheets set "both"; not needed for logo floated right */
div.head h1 { clear: left; }

.domintro::before {
    content: 'For web developers (non-normative)';
    text-transform: initial;
}
.domintro dt {
    font-family: Menlo, Consolas, "DejaVu Sans Mono", Monaco, monospace;

    padding-top: 0.5em;
    padding-bottom: 1em;
}
.domintro dt a {
    color: inherit; border-bottom-style: none;
}
.domintro dt code {
    font-size: inherit;
}
</style>


<img src="logo-font-enumeration.svg" alt="logo" width="100" height="100"
    style="height: 100px; width: 100px; position: absolute; right: 20px; top: 30px;">

<!-- ============================================================ -->
# Introduction # {#introduction}
<!-- ============================================================ -->

This specification describes a font enumeration API for web browsers which may, optionally, allow users to grant access to the full set of available system fonts. For each font, low-level (byte-oriented) access to an SFNT [[!SFNT]] container provides full font data.

Web developers historically lack anything more than heuristic information about which local fonts are available for use in styling page content. Web developers often include complex lists of `font-family` values in their CSS to control font fallback in a heuristic way. Generating good fallbacks is such a complex task for designers that tools have been built to help "eyeball" likely-available local matches.

Font enumeration helps:

* Improving styling options for user-generated content.
* Matching fonts declared by existing content.

While the web has its origins as a text-focused medium and user agents provide very high quality typography support, they have limitations that impact some classes of web-based applications:

* System font engines (and browser stacks) may display certain glyphs differently. These differences are necessary, in general, to create fidelity with the underlying OS (so web content doesn't "look wrong"). These differences reduce consistency for applications that span across multiple platforms, e.g. when pixel-accurate layout and rendering is required.
* Design tools need access to font data to do their own layout in a platform-independent way, and for actions such as performing vector filters or transforms on the glyph shapes.
* Developers may provide font selection UI based on metrics or themes, or automatic font matching based on metrics and other metadata, which require direct access to font data.
* Some fonts may not be licensed for delivery over the web. For example, Linotype has a license for some fonts that only includes desktop use.

Professional-quality design and graphics tools have historically been difficult to deliver on the web. These tools provide extensive typographic features and controls as core capabilities.

This API provides these tools access to the same underlying font data that browser layout and rasterization engines use for drawing text. Examples include the OpenType [[!OPENTYPE]] <a href="https://docs.microsoft.com/en-us/typography/opentype/spec/glyf">glyf</a> table for glyph vector data, the <a href="https://docs.microsoft.com/en-us/typography/opentype/spec/gpos">GPOS</a> table for glyph placement, and the <a href="https://docs.microsoft.com/en-us/typography/opentype/spec/gsub">GSUB</a> table for ligatures and other glyph substitution. This information is necessary for these tools in order to guarantee both platform-independence of the resulting output (by embedding vector descriptions rather than codepoints) and to enable font-based art (treating fonts as the basis for manipulated shapes).


<!-- ============================================================ -->
# Goals # {#goals}
<!-- ============================================================ -->

The API should:

* Provide efficient enumeration of all local fonts without blocking the main thread
* Ensure UAs are free to return anything they like. If a browser implementation prefers, they may choose to only provide a set of default fonts built into the browser.
* Be available from Workers
* Allow multiple levels of privacy preservation; e.g., full access for "trusted" sites and degraded access for untrusted scenarios
* Reflect local font access state in the Permissions API
* Provide unique identification of families and instances (variants like "bold" and "italic"), including PostScript names
* Shield applications from unnecessary complexity by requiring that browser implementations produce valid SFNT data in the returned data
* Enable a memory efficient implementation, avoiding leaks and copies by design
* Restrict access to local font data to Secure Contexts and to only the top-most frame by default via the Permissions Policy spec
* Sort any result list by font name to reduce possible fingerprinting entropy bits; e.g. .query() returns an iterable which will be sorted by given font names
* Provide access to the raw bytes of the font data. Most uses of this API will to provide the full font data to existing libraries that only expect to consume entire font files. Providing only access to pre-parsed font table data would require developers to reassemble a blob containing all of the data in order to use such libraries.

<!--
The ability to uniquely identify a specific font in the case of conflicting names (e.g., Web Font aliases vs. local PostScript font names)
-->



<!-- ============================================================ -->
# Examples # {#examples}
<!-- ============================================================ -->

*This section is non-normative.*

<!-- ============================================================ -->
## Enumerating local fonts ## {#example-enumerate-local-fonts}
<!-- ============================================================ -->

The API allows script to enumerate local fonts, including properties about each font.

<aside class=example id=example-async-query>
The following code queries the available local fonts, and logs the names and metrics of each to the console.

```js
showLocalFontsButton.onclick = async function() {
  try {
    const array = await navigator.fonts.query();

    array.forEach(metadata => {
      console.log(metadata.postscriptName);
      console.log(\` full name: ${metadata.fullName}\`);
      console.log(\` family: ${metadata.family}\`);
      console.log(\` style: ${metadata.style}\`);
    });
   } catch(e) {
    // Handle error, e.g. user cancelled the operation.
    console.warn(\`Local font access not available: ${e.message}\`);
  }
};
```
</aside>

<!-- ============================================================ -->
## Styling with local fonts ## {#example-style-with-local-fonts}
<!-- ============================================================ -->

Advanced creative tools can offer the ability to style text using all available local fonts. In this case, getting access to the local font name allows the user to select from a richer set of choices:

<aside class=example id=example-query-build-ui>

The following code populates a drop-down selection form element with the available local fonts, and could be used as part of the user interface for an editing application.

```js
useLocalFontsButton.onclick = async function() {
  try {
    // Query for allowed local fonts.
    const array = await navigator.fonts.query();

    // Create an element to style.
    const exampleText = document.createElement("p");
    exampleText.id = "exampleText";
    exampleText.innerText = "The quick brown fox jumps over the lazy dog";
    exampleText.style.fontFamily = "dynamic-font";

    // Create a list of fonts to select from, and a selection handler.
    const textStyle = document.createElement("style");
    const fontSelect = document.createElement("select");
    fontSelect.onchange = e => {
      const postscriptName = fontSelect.value;
      console.log("selected:", postscriptName);
      // An example of styling using @font-face src: local matching.
      textStyle.textContent = \`
        @font-face {
          font-family: "dynamic-font";
          src: local("${postscriptName}");
        }\`;
    };

    // Populate the list with the available fonts.
    array.forEach(metadata => {
      const option = document.createElement("option");
      option.text = metadata.fullName;
      // postscriptName can be used with @font-face src: local to style elements.
      option.value = metadata.postscriptName;
      fontSelect.append(option);
    });

    // Add all of the elements to the page.
    document.body.appendChild(textStyle);
    document.body.appendChild(exampleText);
    document.body.appendChild(fontSelect);
  } catch(e) {
    // Handle error, e.g. user cancelled the operation.
    console.warn(\`Local font access not available: ${e.message}\`);
  }
};
```
</aside>


<!-- ============================================================ -->
## Accessing font data ## {#example-accessing-font-data}
<!-- ============================================================ -->

The API allows script to request font data.

<aside class=example id=example-font-data>
The following code queries the available local fonts, and logs details about each to the console.

Here we use enumeration to access specific local font data; we can use this to parse out specific tables or feed it into, e.g., WASM version of [HarfBuzz](https://www.freedesktop.org/wiki/Software/HarfBuzz/) or [Freetype](https://www.freetype.org/):

```js
useLocalFontsButton.onclick = async function() {
  try {
    const array = await navigator.fonts.query();

    array.forEach(metadata => {
      // blob() returns a Blob containing valid and complete SFNT
      // wrapped font data.
      const sfnt = await metadata.blob();

      // Slice out only the bytes we need: the first 4 bytes are the SFNT
      // version info.
      // Spec: https://docs.microsoft.com/en-us/typography/opentype/spec/otff#organization-of-an-opentype-font
      const sfntVersion = await sfnt.slice(0, 4).text();

      let outlineFormat = "UNKNOWN";
      switch (sfntVersion) {
        case '\x00\x01\x00\x00':
        case 'true':
        case 'typ1':
          outlineFormat = "truetype";
          break;
        case 'OTTO':
          outlineFormat = "cff";
          break;
      }
      console.log(\`${metadata.fullName} outline format: ${outlineFormat}\`);
    }
  } catch(e) {
    // Handle error. It could be a permission error.
    console.warn(\`Local font access not available: ${e.message}\`);
  }
};
```

Parsing font files in more detail, for example enumerating the contained tables, is beyond the scope of this specification.
</aside>


<!-- ============================================================ -->
## Requesting specific fonts ## {#example-requesting-specific-fonts}
<!-- ============================================================ -->

In some cases, a web application may wish to request access to specific fonts. For example, it may be presenting previously authored content that embeds font names. The `query()` call takes a `postscriptNames` option that scopes the request to fonts identified by PostScript names. Only fonts exactly matching the names in the list will be returned.

User agents may provide a different user interface to support this. For example, if the fingerprinting risk is deemed minimal, the request may be satisfied without prompting the user for permission. Alternately, a picker could be shown with only the requested fonts included.

<aside class=example id=example-specific-fonts>

```js
// User activation is needed.
requestFontsButton.onclick = async function() {
  try {
    const array = await navigator.fonts.query({postscriptNames: ['Verdana', 'Verdana-Bold', 'Verdana-Italic']});

    array.forEach(metadata => {
      console.log(\`Access granted for ${metadata.postscriptName}\`);
    });

  } catch(e) {
    // Handle error. It could be a permission error.
    console.warn(\`Local font access not available: ${e.message}\`);
  }
};
```

</aside>

<!-- ============================================================ -->
# Concepts # {#concepts}
<!-- ============================================================ -->

Issue: Define any new concepts beyond just the API

<!-- ============================================================ -->
## Font Representation ## {#concept-font-representation}
<!-- ============================================================ -->

A <dfn>font representation</dfn> is an OpenType [[!OPENTYPE]] definition of a font. Even if the font was originally described in another file format, it is assumed that if it is supported by a user agent then an OpenType representation can be derived for it. This includes True Type [[TrueType]], Web Open Font Format 1.0 [[WOFF]] and Web Open Font Format 2.0 [[WOFF2]] files.

<div dfn-for="font representation">

A [=/font representation=] is serialized in SFNT [[!SFNT]] format, a flexible and extensible tabled-based container format which can contain font data in a multitude of other formats.

The <dfn>data bytes</dfn> of a [=/font representation=] is the SFNT [[!SFNT]] serialization of the representation, which is a [=/byte sequence=] encoding a <dfn>table list</dfn>, a [=/list=] of [=/font tables=].

</div>

<!-- ============================================================ -->
## Font Table ## {#concept-font-table}
<!-- ============================================================ -->

A <dfn>font table</dfn> is an OpenType [[!OPENTYPE]] table.

<div dfn-for="font table">

A [=/font table=] has a <dfn>tag</dfn>, which is a {{ByteString}} of length 4, given by the bytes of the `Tag` of the table record.

</div>


<!-- ============================================================ -->
## Name Table ## {#concept-name-table}
<!-- ============================================================ -->

A [=/font representation=] has a <dfn for="font representation">name table</dfn>, which is the [=/font table=] in its [=font representation/table list=] with [=font table/tag=] \``name`\`.

The [=font representation/name table=] has a [=/map=] <dfn for="name table">names</dfn>, which is a mapping from an {{unsigned short}} (a <dfn>name ID</dfn>) to a [=/localized string table=]. [=/Name IDs=] are defined as part of the [[!OPENTYPE]] <a href="https://docs.microsoft.com/en-us/typography/opentype/spec/name">naming table</a> specification.

A <dfn>localized string table</dfn> is a [=/map=] from a BCP 47 language tag to a {{USVString}}. [[BCP47]]

<div algorithm >

A [=/font representation=]'s <dfn for="font representation" lt="name string">name string |id| for |language|</dfn> is given by these steps:

1. Let |names| be the [=/font representation=]'s [=font representation/name table=]'s [=name table/names=].
1. Let |table| be |names|[|id|].
1. Return |table|[|language|].

Issue: What if there is no matching |id| or |language|? Empty string? Where does fallback occur?

Issue: Matching scheme needs to be defined, so that queries for "en" will find "en-US" and vice versa as needed.

</div>

The <dfn>user language</dfn> is a valid BCP 47 language tag representing either [=/a plausible language=] or the user's most preferred language. [[!BCP47]]


<!-- ============================================================ -->
# Permissions Integration # {#permissions-integration}
<!-- ============================================================ -->

Enumeration of local fonts requires a permission to be granted.

<!-- ============================================================ -->
## Permissions ## {#permissions}
<!-- ============================================================ -->

The Local Font Access API is a [=/default powerful feature=] that is identified by the [=powerful feature/name=] <dfn for=PermissionName export enum-value>"font-access"</dfn>.

Issue: File bug against [[PERMISSIONS]], to add to the registry.

<aside class=example id=example-request-permission>
Permission to enumerate local fonts can be queried using the `navigator.permissions` API:

```js
const status = await navigator.permissions.query({ name: "font-access" });
if (status.state === "granted")
  console.log("permission was granted 👍");
else if (status.state === "prompt")
  console.log("permission will be requested");
else
  console.log("permission was denied 👎");
```
</aside>

<!-- ============================================================ -->
## Permissions policy ## {#permissions-policy}
<!-- ============================================================ -->

This specification defines a [=/policy-controlled feature=] identified by the string <dfn for=PermissionPolicy enum-value>"local-fonts"</dfn>. Its [=/default allowlist=] is `'self'`.

Issue: File bug against [[PERMISSIONS-POLICY]] to add policy to its [list](https://github.com/w3c/webappsec-permissions-policy/blob/master/features.md).


<div class=note>
  The [=/default allowlist=] of `'self'` allows usage of this feature on same-origin nested frames by default but prevents access by third-party content.

  Third-party usage can be selectively enabled by adding the `allow="local-fonts"` attribute to an <{iframe}> element:

  <div class=example id=example-frame-delegation>
  ```html
  <iframe src="https://example.com" allow="local-fonts"></iframe>
  ```
  </div>

  Alternatively, this feature can be disabled completely in first-party contexts by specifying the permissions policy in an HTTP response header:

  <div class=example id=example-header-policy>
  ```http
  Permissions-Policy: local-fonts 'none'
  ```
  </div>

  See [[PERMISSIONS-POLICY]] for more details.
</div>


<!-- ============================================================ -->
# API # {#api}
<!-- ============================================================ -->

<!-- ============================================================ -->
## Font task source ## {#font-task-source-dfn}
<!-- ============================================================ -->

The <dfn>font task source</dfn> is a new generic [=/task source=] which is used for all [=/queue a task|tasks that are queued=] in this specification.


<!-- ============================================================ -->
## Font manager ## {#font-manager-api}
<!-- ============================================================ -->

<div class="domintro note">

: await navigator . fonts . {{FontManager/query()}}
: await navigator . fonts . {{FontManager/query()|query}}({ {{QueryOptions/postscriptNames}}: [ ... ] })
  :: Asynchronously query for available/allowed fonts. If successful, the returned promise resolves to an array of {{FontMetadata}} objects.

     If the method is not called while the document has [=/transient activation=] (e.g. in response to a click event), the returned promise will be rejected.

     The user will be prompted for permission for access local fonts. If the permission is not granted, the returned promise will rejected.

     If the {{QueryOptions/postscriptNames}} option is a non-empty array, then only fonts with matching PostScript names will be included in the results.

</div>


<xmp class=idl>
[SecureContext]
interface mixin NavigatorFonts {
  [SameObject] readonly attribute FontManager fonts;
};
Navigator includes NavigatorFonts;
</xmp>

<div algorithm>
Each {{Navigator}} has an associated {{FontManager}} object.

The <dfn attribute for=NavigatorFonts>fonts</dfn> getter steps are to return [=/this=]'s [=/relevant global object=]'s {{Navigator}}'s {{FontManager}} object.
</div>

Issue: Define {{Worker}} support.


<xmp class=idl>
[SecureContext,
 Exposed=Window]
interface FontManager {
  Promise<sequence<FontMetadata>> query(optional QueryOptions options = {});
};

dictionary QueryOptions {
  sequence<DOMString> postscriptNames;
};
</xmp>

<div algorithm>
The <dfn method for=FontManager>query(|options|)</dfn> method steps are:

1. Let |promise| be [=/a new promise=].
1. Let |descriptor| be a {{PermissionDescriptor}} with its {{PermissionDescriptor/name}} set to {{PermissionName/"font-access"}}.
1. If [=/this=]’s [=relevant settings object=]'s [=origin=] is an [=/opaque origin=], then [=/reject=] |promise| with a "{{SecurityError}}" {{DOMException}}, and return |promise|.
1. If [=/this=]’s [=relevant global object=]'s [=/associated Document=] is not [=/allowed to use=] the [=/policy-controlled feature=] named {{PermissionPolicy/"local-fonts"}}, then [=/reject=] |promise| with a "{{SecurityError}}" {{DOMException}}, and return |promise|.
1. If [=/this=]’s [=relevant global object=] does not have [=/transient activation=], then [=/reject=] |promise| with a "{{SecurityError}}" {{DOMException}}, and return |promise|.
1. Otherwise, run these steps [=in parallel=]:
    1. Let |system fonts| be a [=/list=] of all local fonts on the system.
    1. Let |selectable fonts| be a new [=/list=].
    1. [=list/For each=] font |font| in |system fonts|, run these steps:
        1. Let |representation| be a [=/font representation=] for |font|.
        1. Set |representation|'s [=font representation/data bytes=] to a SFNT [[!SFNT]] serialization of the representation.
        1. Let |postscriptName| be |representation|'s [=font representation/name string=] 6 for \``en`\`.
        1. If |postscriptName| is not valid according to the [[!OPENTYPE]] <a href="https://docs.microsoft.com/en-us/typography/opentype/spec/name">naming table</a> specification, then [=iteration/continue=].
        1. If |options|[{{QueryOptions/"postscriptNames"}}] [=map/exists=] and |options|[{{QueryOptions/"postscriptNames"}}] does not [=list/contain=] |postscriptName|, then [=iteration/continue=].
        1. [=list/Append=] a new {{FontMetadata}} instance associated with |representation| to |selectable fonts|.
    1. [=/Prompt the user to choose=] one or more items from |selectable fonts|, with |descriptor|, and let |result| be the result.
        <aside class=note>User agents that choose to make the permission a binary choice rather than displaying a picker can have the permission call return all local fonts on the system.</aside>
    1. If |result| is {{PermissionState/"denied"}}, then [=/reject=] |promise| with a "{{NotAllowedError}}" {{DOMException}}, and abort these steps.
    1. Sort |result| in [=list/sort in ascending order|ascending order=] by using {{FontMetadata/postscriptName}} as the sort key and store the result as |result|.
    1. [=/Queue a task=] on the [=/font task source=] to [=/resolve=] |promise| with |result|.
1. Return |promise|.

</div>

Issue: The above permission checks preclude {{Worker}} support as written.


<!-- ============================================================ -->
## The {{FontMetadata}} interface ## {#fontmetadata-interface}
<!-- ============================================================ -->

A {{FontMetadata}} provides details about a font face. Each {{FontMetadata}} has an associated [=/font representation=].

<div class="domintro note">

    : |metadata| . {{FontMetadata/postscriptName}}
    :: The PostScript name for the font. Example: "`Arial-Bold`".

    : |metadata| . {{FontMetadata/fullName}}
    :: The full font name, including family subfamily names. Example: "`Arial Bold`"

    : |metadata| . {{FontMetadata/family}}
    :: The font family name. This corresponds with the CSS 'font-family' property. Example: "`Arial`"

    : |metadata| . {{FontMetadata/style}}
    :: The font style (or subfamily) name. Example: "`Regular`", "`Bold Italic`"

</div>


<xmp class=idl>
[Exposed=Window]
interface FontMetadata {
  Promise<Blob> blob();

  // Names
  readonly attribute USVString postscriptName;
  readonly attribute USVString fullName;
  readonly attribute USVString family;
  readonly attribute USVString style;
};
</xmp>

<div dfn-for="FontMetadata">

The <dfn attribute>postscriptName</dfn> getter steps are to return [=/this=]'s associated [=/font representation=]'s [=font representation/name string=] 6 for \``en`\`.

The <dfn attribute>fullName</dfn> getter steps are to return [=/this=]'s associated [=/font representation=]'s [=font representation/name string=] 4 for the [=/user language=].

The <dfn attribute>family</dfn> getter steps are to return [=/this=]'s associated [=/font representation=]'s [=font representation/name string=] 1 for the [=/user language=].

The <dfn attribute>style</dfn> getter steps are to return [=/this=]'s associated [=/font representation=]'s [=font representation/name string=] 2 for the [=/user language=].

</div>

<aside class=issue>
Verify source for all of the above. See [Microsoft Typography](https://docs.microsoft.com/en-us/typography/opentype/spec/name)

* Encoding - assume everything has been successfully transcoded to UTF-16 (USVStrings) ?
* Localization - we will provide "en-us"-equivalent labels here - define that behavior.

</aside>

Issue: Include `name` ID 3 (Unique identifier) as well?


<div class="domintro note">

    : await |blob| = |metadata| . {{FontMetadata/blob()}}
    :: Request the font data of |metadata|. The result |blob| contains [=font representation/data bytes=].

</div>

<div algorithm>

The <dfn method for=FontMetadata>blob()</dfn> method steps are:

1. Let |realm| be [=/this=]'s [=/relevant Realm=].
1. Let |promise| be [=/a new promise=] in |realm|.
1. Run these steps [=in parallel=]:
    1. Let |bytes| be [=this=]'s associated [=/font representation=]'s [=font representation/data bytes=].
    1. Let |type| be \``application/octet-stream`\`.
    1. [=/Queue a task=] on the [=/font task source=] to:
       1. Let |blob| be a new {{Blob}} in |realm| whose contents are |bytes| and {{Blob/type}} attribute is |type|.
       1. [=/Resolve=] |promise| with |blob|.
1. Return |promise|.

</div>

<!-- ============================================================ -->
# Internationalization considerations # {#i18n}
<!-- ============================================================ -->

Issue: Document internationalization consideration, e.g. string localization

<!-- ============================================================ -->
## Font Names ## {#i18n-names}
<!-- ============================================================ -->

The \``name`\` table in OpenType [[!OPENTYPE]] fonts allows names (family, subfamily, etc) to have multilingual strings, using either platform-specific numeric language identifiers or language-tag strings conforming to [[BCP47]]. For example, a font could have family name strings defined for both \``en`\` and \``zh-Hant-HK`\`.

The {{FontMetadata}} properties {{FontMetadata/postscriptName}}, {{FontMetadata/fullName}}, {{FontMetadata/family}}, and {{FontMetadata/style}} are provided by this API simply as strings, using the \``en`\` locale. This matches the behavior of the {{FontFace}} {{FontFace/family}} property.

Issue: The above does not match the spec/implementation. Resolve the ambiguity.

Web applications that need to provide names in other languages can request and parse the \``name`\` table directly.

Issue: Should we define an option to the {{FontManager/query()}} method to specify the desired language for strings (e.g. `{lang: 'zh'}`), falling back to \``en`\` if not present?


<!-- ============================================================ -->
# Accessibility considerations # {#a11y}
<!-- ============================================================ -->

There are no known accessibility impacts of this feature.

<!-- ============================================================ -->
# Security considerations # {#security}
<!-- ============================================================ -->

There are no known security impacts of this feature.

<!-- ============================================================ -->
# Privacy considerations # {#privacy}
<!-- ============================================================ -->

<!-- ============================================================ -->
## Fingerprinting ## {#privacy-fingerprinting}
<!-- ============================================================ -->

The font metadata includes:

* Fonts included in the operating system distribution.
* Fonts installed by particular applications installed on the system, for example office suites.
* Fonts directly installed by the system administrator and/or end user.
* The version of the font installed on the system, obtained via the font data.

This provides several "bits of entropy" to distinguish users.

User agents could mitigate this in certain cases (e.g. when the permission is denied, or in Private Browsing / "incognito" mode) by providing an enumeration of a fixed set of fonts provided with the user agent.

User agents may also allow the user to select a set of fonts to make available via the API.

<!-- ============================================================ -->
## Identification ## {#privacy-identification}
<!-- ============================================================ -->

Users from a particular organization could have specific fonts installed. Employees of "Example Co." could all have an "Example Corporate Typeface" installed by their system administrator, which would allow distinguishing users of a site as employees.

There are services which create fonts based on handwriting samples. If these fonts are given names including personally identifiable information (e.g. "Alice's Handwriting Font"), then personally identifiable information would be made available. This may not be apparent to users if the information is included as properties within the font, not just the font name.


<!-- ============================================================ -->
# Acknowledgements # {#acknowledgements}
<!-- ============================================================ -->

We'd like to acknowledge the contributions of:

* Daniel Nishi, Owen Campbell-Moore, and Mike Tsao who helped pioneer the previous local font access proposal.
* Evan Wallace, Biru, Leah Cassidy, Katie Gregorio, Morgan Kennedy, and Noah Levin of Figma who have patiently enumerated the needs of their ambitious web product.
* Alex Russell, who drafted the initial version of this proposal.
* Olivier Yiptong, who provided an initial implementation and iteration on the API shape.
* Tab Atkins, Jr. and the CSS Working Group who have provided usable base-classes which only need slight extension to enable these cases.
* Dominik Röttsches and Igor Kopylov for their thoughtful feedback.
* We would like to express our gratitude to former editor Emil A. Eklund, who passed away in 2020. Emil was instrumental in getting this proposal underway, providing technical guidance, and championing the needs of users and developers.

Special thanks (again!) to Tab Atkins, Jr. for creating and maintaining [Bikeshed](https://github.com/tabatkins/bikeshed), the specification authoring tool used to create this document.

And thanks to
Chase Phillips,
Domenic Denicola,
Dominik Röttsches,
Igor Kopylov, and
Jake Archibald

for suggestions, reviews, and other feedback.
